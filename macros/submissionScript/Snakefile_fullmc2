from submissionScript.GlobalConfig import sim_Tot_Evt, sim_Num_Divided, sim_DirName, sim_FileName, sim_digiCharge, sim_length, sim_PDGList

Tot_Evt = sim_Tot_Evt
Num_Divided = sim_Num_Divided
DirName = sim_DirName
FileName = sim_FileName
digiCharge = sim_digiCharge
length = sim_length
PDGList = sim_PDGList

import os
vmc_dir = os.environ['VMCWORKDIR']
evt_per_job = int(Tot_Evt/Num_Divided)
os.makedirs(os.path.join(vmc_dir, 'macros', 'log', DirName), exist_ok=True)

#rule run_all:
#  input:
#    expand('{VMCDIR}/macros/data/{DIRNAME}/{PDG}/{FILENAME}_DigiCharge{digiCharge}_Length{length}_s{id}_s0.reco.v1.04.conc.root', DIRNAME=DirName, PDG=PDGList, FILENAME=FileName, VMCDIR=vmc_dir, id=list(range(Num_Divided)), digiCharge=digiCharge, length=length)

rule run_transport_mc2:
  output:
    temp(expand('{VMCDIR}/macros/data/{{DIRNAME}}/{{PDG}}/{{filename}}_s{{id}}.mc.root', VMCDIR=vmc_dir)),
    temp(expand('{VMCDIR}/macros/data/{{DIRNAME}}/{{PDG}}/{{filename}}_s{{id}}.params.root', VMCDIR=vmc_dir))
  resources:
    cpu=1
  params:
    log_dir = os.path.join(vmc_dir, 'macros', 'log'),
    run_num = evt_per_job,
    start_num =  lambda wildcards: evt_per_job*int(str(wildcards.id)),
    pdg = lambda wildcards: '2212,1000010020,1000010030,1000020030,1000020040,211,-211' if wildcards.PDG == 'All' else '2212,1000010020,1000020030,1000020040' if wildcards.PDG == 'NoTriton' else '2212,1000010030,1000020030,1000020040' if wildcards.PDG == 'NoDeuteron' else '2212,1000020030' if wildcards.PDG == 'PHe3' else str(wildcards.PDG)
  shell:
    """
    LOGDIR={params.log_dir}/{wildcards.DIRNAME}/{wildcards.PDG}/{wildcards.filename}
    mkdir -p ${{LOGDIR}}
    root -b -q -l 'run_transport_mc.C("{wildcards.DIRNAME}/{wildcards.PDG}/{wildcards.filename}_s{wildcards.id}",{params.run_num},"","data/",kTRUE,{params.start_num},{{{params.pdg}}},"{wildcards.filename}.root")' > ${{LOGDIR}}_{wildcards.id}_mc.log
    """

rule run_transport_digi2:
  input:
    expand('{VMCDIR}/macros/data/{{filename}}_s{{id}}.mc.root', VMCDIR=vmc_dir),
    expand('{VMCDIR}/macros/data/{{filename}}_s{{id}}.params.root', VMCDIR=vmc_dir)
  output:
    temp(expand('{VMCDIR}/macros/data/{{filename}}_DigiCharge{{digiCharge}}_s{{id}}.digi.root', VMCDIR=vmc_dir)),
  resources:
    cpu=1
  params:
    log_dir = os.path.join(vmc_dir, 'macros', 'log'),
    run_num = evt_per_job,
    start_num =  lambda wildcards: evt_per_job*int(str(wildcards.id))
  shell:
    """
    LOGDIR={params.log_dir}/{wildcards.filename}
    mkdir -p ${{LOGDIR}}
    root -b -q -l 'run_digi.C("{wildcards.filename}_s{wildcards.id}",4e-8,"ST.parameters.fullmc.par",true,{wildcards.digiCharge},"{wildcards.filename}_DigiCharge{wildcards.digiCharge}_s{wildcards.id}")' > ${{LOGDIR}}_DigiCharge{wildcards.digiCharge}_{wildcards.id}_digi.log
    """

rule run_transport_reco2:
  input:
    expand('{VMCDIR}/macros/data/{{filename}}_DigiCharge{{digiCharge}}_s{{id}}.digi.root', VMCDIR=vmc_dir),
  output:
    expand('{VMCDIR}/macros/data/{{filename}}_DigiCharge{{digiCharge}}_Length{{length}}_s{{id}}_s0.reco.v1.04.root', VMCDIR=vmc_dir),
    expand('{VMCDIR}/macros/data/{{filename}}_DigiCharge{{digiCharge}}_Length{{length}}_s{{id}}_s0.reco.v1.04.conc.root', VMCDIR=vmc_dir)
  resources:
    cpu=1
  params:
    log_dir = os.path.join(vmc_dir, 'macros', 'log'),
    run_num = evt_per_job,
    start_num =  lambda wildcards: evt_per_job*int(str(wildcards.id))
  shell:
    """
    LOGDIR={params.log_dir}/{wildcards.filename}
    root -b -q -l 'run_reco_mc.C("{wildcards.filename}_DigiCharge{wildcards.digiCharge}_s{wildcards.id}",{wildcards.length},"{wildcards.filename}_DigiCharge{wildcards.digiCharge}_Length{wildcards.length}_s{wildcards.id}")' > ${{LOGDIR}}_{wildcards.id}_{wildcards.length}_reco.log
    """
