Tot_Evt = 50000
Num_Divided = 300
DirName = 'ApproxSn132WithLeakageFullStatistics'
FileName = 'Approx'
PDGList = ['All']

import os
vmc_dir = os.environ['VMCWORKDIR']
evt_per_job = int(Tot_Evt/Num_Divided)
os.makedirs(os.path.join(vmc_dir, 'macros', 'log', DirName), exist_ok=True)

ruleorder: run_merge_mc > run_transport_mc
#[90,100,110,120,122,125,131]
rule run_all:
  input:
    expand('{VMCDIR}/macros/data/{DIRNAME}/{PDG}/{FILENAME}_zLimit{zLimit}_s{id}_s0.reco.v1.04.conc.root', DIRNAME=DirName, PDG=PDGList, FILENAME=FileName, VMCDIR=vmc_dir, zLimit=[140], id=list(range(Num_Divided)))

rule run_merge_mc:
  input:
    expand('{VMCDIR}/macros/data/{{DIRNAME}}/{PDG}/{{filename}}_s{{id}}.mc.root', VMCDIR=vmc_dir, PDG=['2212', '1000010020', '1000010030', '1000020030', '1000020040']),
    expand('{VMCDIR}/macros/data/{{DIRNAME}}/{PDG}/{{filename}}_s{{id}}.params.root', VMCDIR=vmc_dir, PDG=['2212', '1000010020', '1000010030', '1000020030', '1000020040'])
  output:
    temp(expand('{VMCDIR}/macros/data/{{DIRNAME}}/Merged/{{filename}}_s{{id}}.mc.root', VMCDIR=vmc_dir)),
    temp(expand('{VMCDIR}/macros/data/{{DIRNAME}}/Merged/{{filename}}_s{{id}}.params.root', VMCDIR=vmc_dir))
  resources:
    cpu=1
  params:
    log_dir = os.path.join(vmc_dir, 'macros', 'log'),
  shell:
    """
    LOGDIR={params.log_dir}/{wildcards.DIRNAME}/Merged/{wildcards.filename}
    mkdir -p ${{LOGDIR}}
    cp data/{wildcards.DIRNAME}/2212/{wildcards.filename}_s{wildcards.id}.params.root data/{wildcards.DIRNAME}/Merged/{wildcards.filename}_s{wildcards.id}.params.root
    root -b -q -l 'MergeMC.C({{"data/{wildcards.DIRNAME}/2212/{wildcards.filename}_s{wildcards.id}.mc.root","data/{wildcards.DIRNAME}/1000010020/{wildcards.filename}_s{wildcards.id}.mc.root","data/{wildcards.DIRNAME}/1000010030/{wildcards.filename}_s{wildcards.id}.mc.root", "data/{wildcards.DIRNAME}/1000020030/{wildcards.filename}_s{wildcards.id}.mc.root","data/{wildcards.DIRNAME}/1000020040/{wildcards.filename}_s{wildcards.id}.mc.root"}},"data/{wildcards.DIRNAME}/Merged/{wildcards.filename}_s{wildcards.id}.mc.root")' > ${{LOGDIR}}_{wildcards.id}_mcMerge.log || true
    echo Finished
    """

rule run_transport_mc:
  output:
    temp(expand('{VMCDIR}/macros/data/{{DIRNAME}}/{{PDG}}/{{filename}}_s{{id}}.mc.root', VMCDIR=vmc_dir)),
    temp(expand('{VMCDIR}/macros/data/{{DIRNAME}}/{{PDG}}/{{filename}}_s{{id}}.params.root', VMCDIR=vmc_dir))
  resources:
    cpu=1
  params:
    log_dir = os.path.join(vmc_dir, 'macros', 'log'),
    run_num = evt_per_job,
    start_num =  lambda wildcards: evt_per_job*int(str(wildcards.id)),
    pdg = lambda wildcards: '2212,1000010020,1000010030,1000020030,1000020040' if wildcards.PDG == 'All' else '2212,1000010020,1000020030,1000020040' if wildcards.PDG == 'NoTriton' else '2212,1000010030,1000020030,1000020040' if wildcards.PDG == 'NoDeuteron' else '2212,1000020030' if wildcards.PDG == 'PHe3' else str(wildcards.PDG)
  shell:
    """
    LOGDIR={params.log_dir}/{wildcards.DIRNAME}/{wildcards.PDG}/{wildcards.filename}
    mkdir -p ${{LOGDIR}}
    root -b -q -l 'run_transport_mc.C("{wildcards.DIRNAME}/{wildcards.PDG}/{wildcards.filename}_s{wildcards.id}",{params.run_num},"","data/",kTRUE,{params.start_num},{{{params.pdg}}})' > ${{LOGDIR}}_{wildcards.id}_mc.log
    """

rule run_transport_digi:
  input:
    expand('{VMCDIR}/macros/data/{{filename}}_s{{id}}.mc.root', VMCDIR=vmc_dir),
    expand('{VMCDIR}/macros/data/{{filename}}_s{{id}}.params.root', VMCDIR=vmc_dir)
  output:
    temp(expand('{VMCDIR}/macros/data/{{filename}}_s{{id}}.digi.root', VMCDIR=vmc_dir)),
  resources:
    cpu=1
  params:
    log_dir = os.path.join(vmc_dir, 'macros', 'log'),
    run_num = evt_per_job,
    start_num =  lambda wildcards: evt_per_job*int(str(wildcards.id))
  shell:
    """
    LOGDIR={params.log_dir}/{wildcards.filename}
    mkdir -p ${{LOGDIR}}
    root -b -q -l 'run_digi.C("{wildcards.filename}_s{wildcards.id}",4.23e-8,"ST.parameters.fullmc.par",true)' > ${{LOGDIR}}_{wildcards.id}_digi.log
    """

rule run_transport_reco:
  input:
    expand('{VMCDIR}/macros/data/{{filename}}_s{{id}}.digi.root', VMCDIR=vmc_dir),
  output:
    expand('{VMCDIR}/macros/data/{{filename}}_zLimit{{zLimit}}_s{{id}}_s0.reco.v1.04.root', VMCDIR=vmc_dir),
    expand('{VMCDIR}/macros/data/{{filename}}_zLimit{{zLimit}}_s{{id}}_s0.reco.v1.04.conc.root', VMCDIR=vmc_dir)
  resources:
    cpu=1
  params:
    log_dir = os.path.join(vmc_dir, 'macros', 'log'),
    run_num = evt_per_job,
    start_num =  lambda wildcards: evt_per_job*int(str(wildcards.id))
  shell:
    """
    LOGDIR={params.log_dir}/{wildcards.filename}
    root -b -q -l 'run_reco_mc.C("{wildcards.filename}_s{wildcards.id}",{wildcards.zLimit},"{wildcards.filename}_zLimit{wildcards.zLimit}_s{wildcards.id}")' > ${{LOGDIR}}_{wildcards.id}_reco.log
    """
